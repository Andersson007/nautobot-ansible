---
name: "CI"
on:
  - "push"
  - "pull_request"

jobs:
  lint:
    runs-on: "ubuntu-20.04"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Install invoke"
        run: "pip install -U pip && pip install invoke"
      - name: "Start containers"
        run: "invoke start"
      - name: "Linting"
        run: "invoke lint"
  test:
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9"]
    env:
      INVOKE_NAUTOBOT_ANSIBLE_PYTHON_VER: "${{ matrix.python-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Install invoke"
        run: "pip install -U pip && pip install invoke"
      - name: "Start containers"
        run: "invoke start"
      - name: "Tests"
        run: "invoke unit"
    needs:
      - "lint"
  # integration-ansible-base:
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     INVOKE_NAUTOBOT_ANSIBLE_PYTHON_VER: "3.6"
  #     INVOKE_NAUTOBOT_ANSIBLE_NAUTOBOT_VER: "1.0.3"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Install invoke"
  #       run: "pip install -U pip && pip install invoke"
  #     - name: "Start containers"
  #       run: "invoke start"
  #     - name: "Tests"
  #       run: "invoke integration"
  #   needs:
  #     - "test"
  integration:
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: true
      matrix:
        # python-version: ["3.6", "3.7", "3.8", "3.9"]
        # nautobot-version: ["1.0.3", "1.1.1"]
        # ansible-release: ["base", "core"]
        include:
          - python-version: "3.6"
            nautobot-version: "1.0.3"
            ansible-release: "base"
          - python-version: "3.7"
            nautobot-version: "1.1.1"
            ansible-release: "core"
    env:
      INVOKE_NAUTOBOT_ANSIBLE_PYTHON_VER: "${{ matrix.python-version }}"
      INVOKE_NAUTOBOT_ANSIBLE_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
    steps:
      - name: "Check out repository code"
        uses: "actions/checkout@v2"
      - name: "Install invoke"
        run: "pip install -U pip && pip install invoke"
      - name: "Install poetry"
        if: "${{ matrix.ansible-release == 'core' }}"
        run: "pip install poetry"
      - name: "Remove ansible-base"
        if: "${{ matrix.ansible-release == 'core' }}"
        run: "poetry remove ansible-base"
      - name: "Remove ansible-core"
        if: "${{ matrix.ansible-release == 'core' }}"
        run: "poetry add ansible-core"
      - name: "Start containers"
        run: "invoke start"
      - name: "Tests"
        run: "invoke integration"
    needs:
      - "test"



  # integration-ansible-core:
  #   runs-on: "ubuntu-20.04"
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       python-version: ["3.6", "3.7", "3.8", "3.9"]
  #       nautobot-version: [""]
  #   env:
  #     INVOKE_NAUTOBOT_ANSIBLE_PYTHON_VER: "${{ matrix.python-version }}"
  #     INVOKE_NAUTOBOT_ANSIBLE_NAUTOBOT_VER: "1.1.1"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Install invoke"
  #       run: "pip install -U pip && pip install invoke poetry"
  #     - name: "Remove ansible-base"
  #       run: "poetry remove ansible-base"
  #     - name: "Remove ansible-core"
  #       run: "poetry add ansible-core"
  #     - name: "Start containers"
  #       run: "invoke start"
  #     - name: "Tests"
  #       run: "invoke integration"
  #   needs:
  #     - "test"

  # integration:
  #   runs-on: "ubuntu-20.04"
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       python-version: ["3.6", "3.7", "3.8", "3.9"]
  #       nautobot-version: ["1.0.3", "1.1.2"]
  #   env:
  #     INVOKE_NAUTOBOT_ANSIBLE_PYTHON_VER: "${{ matrix.python-version }}"
  #     INVOKE_NAUTOBOT_ANSIBLE_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"

  # black:
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     INVOKE_NAUTOBOT_CHATOPS_LOCAL: "True"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "./.github/actions/setup-environment"
  #     - name: "Linting: black"
  #       run: "poetry run invoke black"
  # bandit:
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     INVOKE_NAUTOBOT_CHATOPS_LOCAL: "True"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "./.github/actions/setup-environment"
  #     - name: "Linting: bandit"
  #       run: "poetry run invoke bandit"
  #   needs:
  #     - "black"
  # pydocstyle:
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     INVOKE_NAUTOBOT_CHATOPS_LOCAL: "True"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "./.github/actions/setup-environment"
  #     - name: "Linting: pydocstyle"
  #       run: "poetry run invoke pydocstyle"
  #   needs:
  #     - "black"
  # flake8:
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     INVOKE_NAUTOBOT_CHATOPS_LOCAL: "True"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "./.github/actions/setup-environment"
  #     - name: "Linting: flake8"
  #       run: "poetry run invoke flake8"
  #   needs:
  #     - "black"
  # yamllint:
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     INVOKE_NAUTOBOT_CHATOPS_LOCAL: "True"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "./.github/actions/setup-environment"
  #     - name: "Linting: yamllint"
  #       run: "poetry run invoke yamllint"
  #   needs:
  #     - "black"
  # build:
  #   runs-on: "ubuntu-20.04"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "./.github/actions/setup-environment"
  #     - name: "Copy credentials"
  #       run: "cp development/creds.example.env development/creds.env"
  #     - name: "Build Container"
  #       run: "poetry run invoke build"
  #   needs:
  #     - "bandit"
  #     - "pydocstyle"
  #     - "flake8"
  #     - "yamllint"
  # pylint:
  #   runs-on: "ubuntu-20.04"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "./.github/actions/setup-environment"
  #     - name: "Copy credentials"
  #       run: "cp development/creds.example.env development/creds.env"
  #     - name: "Build Container"
  #       run: "poetry run invoke build"
  #     - name: "Linting: Pylint"
  #       run: "poetry run invoke pylint"
  #   needs:
  #     - "build"
  # unittest:
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       python-version: ["3.6", "3.7", "3.8", "3.9"]
  #       nautobot-version: ["1.0.3", "1.1.2"]
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     INVOKE_NAUTOBOT_CHATOPS_PYTHON_VER: "${{ matrix.python-version }}"
  #     INVOKE_NAUTOBOT_CHATOPS_NAUTOBOT_VER: "${{ matrix.nautobot-version }}"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Setup environment"
  #       uses: "./.github/actions/setup-environment"
  #     - name: "Copy credentials"
  #       run: "cp development/creds.example.env development/creds.env"
  #     - name: "Build Container"
  #       run: "poetry run invoke build"
  #     - name: "Run Tests"
  #       run: "poetry run invoke unittest"
  #   needs:
  #     - "pylint"
  # publish_gh:
  #   name: "Publish to GitHub"
  #   runs-on: "ubuntu-20.04"
  #   if: "startsWith(github.ref, 'refs/tags/v')"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Set up Python"
  #       uses: "actions/setup-python@v2"
  #       with:
  #         python-version: "3.9"
  #     - name: "Install Python Packages"
  #       run: "pip install poetry"
  #     - name: "Set env"
  #       run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
  #     - name: "Run Poetry Version"
  #       run: "poetry version $RELEASE_VERSION"
  #     - name: "Run Poetry Build"
  #       run: "poetry build"
  #     - name: "Upload binaries to release"
  #       uses: "svenstaro/upload-release-action@v2"
  #       with:
  #         repo_token: "${{ secrets.NTC_GITHUB_TOKEN }}"
  #         file: "dist/*"
  #         tag: "${{ github.ref }}"
  #         overwrite: true
  #         file_glob: true
  #   needs:
  #     - "unittest"
  # publish_pypi:
  #   name: "Push Package to PyPI"
  #   runs-on: "ubuntu-20.04"
  #   if: "startsWith(github.ref, 'refs/tags/v')"
  #   steps:
  #     - name: "Check out repository code"
  #       uses: "actions/checkout@v2"
  #     - name: "Set up Python"
  #       uses: "actions/setup-python@v2"
  #       with:
  #         python-version: "3.9"
  #     - name: "Install Python Packages"
  #       run: "pip install poetry"
  #     - name: "Set env"
  #       run: "echo RELEASE_VERSION=${GITHUB_REF:10} >> $GITHUB_ENV"
  #     - name: "Run Poetry Version"
  #       run: "poetry version $RELEASE_VERSION"
  #     - name: "Run Poetry Build"
  #       run: "poetry build"
  #     - name: "Push to PyPI"
  #       uses: "pypa/gh-action-pypi-publish@release/v1"
  #       with:
  #         user: "__token__"
  #         password: "${{ secrets.PYPI_API_TOKEN }}"
  #   needs:
  #     - "unittest"




# ---
# language: python
# services:
#   - docker

# os: linux
# dist: focal

# stages:
#   - test
#   - integration
#   - name: "deploy"
#     if: "tag IS present"

# env:
#   global:
#     - COLLECTION_NAMESPACE: "networktocode"
#     - COLLECTION_NAME: "nautobot"
#     - COLLECTION_VERSION: "3.0.0"
#     - COMPOSE_PROJECT_NAME: "nautobot_ansible"

# python:
#   - 3.6
#   - 3.7
#   - 3.8
#   - 3.9

# install:
#   - pip install -U pip
#   - pip install invoke
#   - invoke start

# script:
#   - invoke unit

# jobs:
#   fast_finish: true
#   include:
#     - name: "Python 3.6 - Nautobot 1.0.X - ansible-base 2.10.X"
#       python: 3.6
#       stage: integration
#       env:
#         - INVOKE_NAUTOBOT_ANSIBLE_PYTHON_VER=3.6
#         - INVOKE_NAUTOBOT_ANSIBLE_NAUTOBOT_VER=1.0.3
#       script:
#         - invoke integration
#     - name: "Python 3.7 - Nautobot 1.1.X - Latest Ansible Core"
#       python: 3.9
#       stage: integration
#       env:
#         - INVOKE_NAUTOBOT_ANSIBLE_PYTHON_VER=3.7
#         - INVOKE_NAUTOBOT_ANSIBLE_NAUTOBOT_VER=1.1.1
#       before_script:
#         - pip uninstall -y virtualenv
#         - sudo apt update && sudo apt install python3-virtualenv
#       script:
#         - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
#         - export PATH=$HOME/.poetry/bin:$PATH
#         - poetry config virtualenvs.create false
#         - poetry remove ansible-base
#         - poetry add ansible-core
#         - invoke integration
#     # - name: "Python 3.8 - Nautobot 1.1.X - Latest Ansible Core"
#     #   python: 3.8
#     #   env:
#     #     - INVOKE_NAUTOBOT_ANSIBLE_PYTHON_VER=3.8
#     #     - INVOKE_NAUTOBOT_ANSIBLE_NAUTOBOT_VER=develop
#     #   script:
#     #     - poetry install ansible-core
#     #     - invoke integration

#     - name: "Deploy stage"
#       stage: deploy
#       provider: script
#       cleanup: true
#       before_script:
#         - pip install ansible-core
#       script: 
#         - ansible-galaxy collection build
#         - ansible-galaxy collection publish $TRAVIS_BUILD_DIR/$COLLECTION_NAMESPACE-$COLLECTION_NAME-$COLLECTION_VERSION.tar.gz --api-key="$GALAXY_API_TOKEN"
